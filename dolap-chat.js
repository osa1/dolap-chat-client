// Generated by CoffeeScript 1.3.1
(function() {
  var Channel, Parser, channels, current_channel, handle_msg, leave_channel, login_ok, nick, scroll_bottom, send, socket, switch_channel, try_join_channel, update_user_info_div;

  socket = new WebSocket("ws://0.0.0.0:3000");

  send = function(msg) {
    console.log("SENT MSG: " + msg);
    return socket.send(msg);
  };

  socket.onmessage = function(evt) {
    var msg;
    msg = evt.data;
    console.log("GOT MSG: " + msg);
    return handle_msg(msg);
  };

  socket.onclose = function(e) {
    var channel, term, _i, _len, _ref, _results;
    _ref = Object.keys(channels);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      channel = _ref[_i];
      _results.push(term = $("#" + channel).terminal().error("Disconnected."));
    }
    return _results;
  };

  socket.onerror = function(e) {
    console.log("error: " + e.code);
    return $("#oda").terminal().error("error: " + e.code);
  };

  Parser = (function() {

    Parser.name = 'Parser';

    function Parser(text) {
      this.text = text;
      this.rest = jQuery.trim(text);
    }

    Parser.prototype.get_next_token = function() {
      var r, space_idx;
      space_idx = this.rest.indexOf(' ');
      if (space_idx === -1) {
        r = this.rest;
        this.rest = "";
        return r;
      }
      r = this.rest.slice(0, space_idx);
      this.rest = jQuery.trim(this.rest.slice(space_idx + 1));
      return r;
    };

    Parser.prototype.get_rest = function() {
      return this.rest;
    };

    return Parser;

  })();

  handle_msg = function(msg) {
    var chan, chan_element, cmd, from, m, parser, t1, user, users;
    parser = new Parser(msg);
    cmd = parser.get_next_token();
    if (cmd === 'msg') {
      from = parser.get_next_token();
      chan = parser.get_next_token();
      chan_element = $("#" + chan);
      m = parser.get_rest();
      if (from !== nick) {
        return chan_element.terminal().echo(from + '> ' + m);
      }
    } else if (cmd === 'join') {
      user = parser.get_next_token();
      chan = parser.get_next_token();
      chan_element = $("#" + chan);
      chan_element.data('channel').add_user(user);
      return chan_element.terminal().echo(user + ' has joined the channel.');
    } else if (cmd === 'leave') {
      user = parser.get_next_token();
      chan = parser.get_next_token();
      chan_element = $("#" + chan);
      chan_element.data('channel').remove_user(user);
      return chan_element.terminal().echo(user + " has left the channel.");
    } else if (cmd === "users") {
      chan = parser.get_next_token();
      users = parser.get_rest().split(',');
      try_join_channel(chan);
      console.log(channels.chan);
      console.log(Object.keys(channels));
      console.log(typeof channels.chan);
      return channels[chan].set_users(users);
    } else if (cmd === "login") {
      t1 = parser.get_next_token();
      if (t1 === 'ok') {
        return login_ok();
      } else if (t1 === 'nickinuse') {
        return $("#login-text").html("Nick is in use.");
      }
    }
  };

  channels = {};

  current_channel = void 0;

  nick = void 0;

  Channel = (function() {

    Channel.name = 'Channel';

    function Channel(name) {
      var tab_name, term_func;
      this.name = name;
      this.users = [];
      $("#terminals").append('<div id="' + name + '"></div>');
      term_func = function(command, term) {
        if (command[0] === "/") {
          return send(command.slice(1));
        } else {
          return send("msg " + name + " " + command);
        }
      };
      jQuery(function($, _) {
        return $("#" + name).terminal(term_func, {
          greetings: 'Channel: ' + name,
          name: name,
          prompt: nick + '> '
        });
      });
      tab_name = name + "_tab";
      $("#tabs").append('<li id="' + tab_name + '"><a>' + name + ' <span id="close-' + name + '"> [x]</a>' + '</span></li>');
      $("#" + tab_name).click(function() {
        return switch_channel(channels[name]);
      });
      $("#close-" + name).click(function() {
        if (current_channel === name) {
          return leave_channel(name);
        }
      });
      $("#" + name).data('channel', this);
    }

    Channel.prototype.add_user = function(nick) {
      this.users.push(nick);
      if (this.name === current_channel) {
        return update_user_info_div(this.users);
      }
    };

    Channel.prototype.set_users = function(nicks) {
      var nick, _i, _len;
      this.users = [];
      for (_i = 0, _len = nicks.length; _i < _len; _i++) {
        nick = nicks[_i];
        this.users.push(nick);
      }
      if (this.name === current_channel) {
        return update_user_info_div(this.users);
      }
    };

    Channel.prototype.remove_user = function(nick) {
      this.users = this.users.slice(this.users.indexOf(nick), 1);
      if (this.name === current_channel) {
        return update_user_info_div(this.users);
      }
    };

    return Channel;

  })();

  try_join_channel = function(name) {
    console.log("try_join_channel: " + name);
    if (channels[name] === void 0) {
      channels[name] = new Channel(name);
      console.log("channel object after try_join_channel: " + channels.name);
      console.log("channel name that inserted to the map: " + name);
    } else {
      console.log("already joined that channel: " + channels[name]);
    }
    return switch_channel(channels[name]);
  };

  leave_channel = function(name) {
    send("leave " + name);
    $("#" + name).remove();
    $("#" + name + "_tab").remove();
    channels[name] = void 0;
    return switch_channel(Object.keys(channels)[0]);
  };

  switch_channel = function(chan) {
    var channame, name, _i, _len, _ref;
    console.log("switching channel: " + chan);
    console.log("which has the name of: " + chan.name);
    name = chan.name;
    _ref = Object.keys(channels);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      channame = _ref[_i];
      $("#" + channame).hide();
      $("#" + channame + "_tab").removeAttr("class");
    }
    $("#" + name).show();
    $("#" + name + "_tab").attr("class", "active");
    scroll_bottom(name);
    current_channel = name;
    return update_user_info_div($("#" + name).data('channel').users);
  };

  scroll_bottom = function(channel_name) {
    var t;
    t = $("#" + channel_name).terminal();
    return t.scroll(t.height());
  };

  update_user_info_div = function(users) {
    var i, _i, _ref, _results;
    $("#info").html("");
    $("#info").append("<h2>Users</h2>");
    _results = [];
    for (i = _i = 0, _ref = users.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (i !== 0) {
        $("#info").append("<br>");
      }
      _results.push($("#info").append(users[i]));
    }
    return _results;
  };

  login_ok = function() {
    $("#login-text").html("");
    $("#login-modal").modal("hide");
    return setTimeout((function() {
      return send("join oda");
    }), 100);
  };

  $(document).ready(function() {
    $("#login-modal").modal('show');
    $("#login-btn").click(function() {
      $("#login-text").html("Logging in..");
      send("login " + $("#nick-input").val());
      return nick = $("#nick-input").val();
    });
    $("#register-btn").click(function() {
      console.log("ok");
      $("#login-modal").modal('hide');
      setTimeout((function() {
        return $("#register-modal").modal('show');
      }), 300);
      $("#cancel-register-btn").click(function() {
        $("#register-modal").modal('hide');
        return setTimeout((function() {
          return $("#login-modal").modal('show');
        }), 300);
      });
      return $("#register-accept-btn").click(function() {
        var err, error, pwd, pwd2;
        nick = $("#nick-accept-btn").val();
        pwd = $("#password-input-1").val();
        pwd2 = $("#password-input-2").val();
        err = false;
        if (pwd !== pwd2) {
          $("#password-input-group-1").addClass("error");
          $("#password-error-span1").html("Passwords doesn't match.");
          $("#password-input-group-2").addClass("error");
          err = true;
        } else {
          $("#password-input-group-1").removeClass("error");
          $("#password-input-group-2").removeClass("error");
          $("#password-error-span1").html("");
        }
        if (nick.length < 4) {
          $("#nick-error-span").html("Nick should be longer than 3 characters.");
          $("#nick-input-group").addClass("error");
          error = true;
        } else {
          $("#nick-error-span").html("");
          $("#nick-input-group").removeClass("error");
        }
        if (!err) {
          $("#register-form-help-block").html("Register....");
        }
        return console.log("accept register");
      });
    });
    $("#join-channel").click(function() {
      return $("#" + current_channel).terminal().insert("/join ");
    });
    return $("#info").draggable();
  });

}).call(this);
